<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ^_^</title>
    <link>https://www.akshendra.com/post/</link>
    <description>Recent content in Posts on ^_^</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>meine@akshendra.com (Akshendra Pratap Singh)</managingEditor>
    <webMaster>meine@akshendra.com (Akshendra Pratap Singh)</webMaster>
    <lastBuildDate>Sat, 23 Jun 2018 00:59:10 +0530</lastBuildDate>
    
	<atom:link href="https://www.akshendra.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The beast that is `Array.prototype.reduce`</title>
      <link>https://www.akshendra.com/post/madlad-reduce/</link>
      <pubDate>Sat, 23 Jun 2018 00:59:10 +0530</pubDate>
      <author>meine@akshendra.com (Akshendra Pratap Singh)</author>
      <guid>https://www.akshendra.com/post/madlad-reduce/</guid>
      <description>reduce() is an absolute beast of a method when it comes to functional style programming in JavaScript. The more you use it, the more you see use cases popping everywhere for it.
I recently realized, that it has become my goto method, whenever I have to deal with arrays. So I looked through bunch of my code and found a lot of examples, some of which I will list in this post.</description>
    </item>
    
    <item>
      <title>Generating documentation on the fly in express</title>
      <link>https://www.akshendra.com/post/docs-on-fly/</link>
      <pubDate>Sat, 09 Jun 2018 00:59:10 +0530</pubDate>
      <author>meine@akshendra.com (Akshendra Pratap Singh)</author>
      <guid>https://www.akshendra.com/post/docs-on-fly/</guid>
      <description>I little while ago, I decided to generate docs for some HTTP APIs I was about to build. The APIs were going to be used internally, so I didn&amp;rsquo;t want to commit to any of the online solutions, like API Blueprint, Apiary or Swagger. And setting up something from scratch would have been, &amp;hellip; bit much. Also, I wanted the docs integrated within the code, avoiding any kind of context switch just to write documentation.</description>
    </item>
    
    <item>
      <title>Reloading the express server without nodemon</title>
      <link>https://www.akshendra.com/post/express-reload/</link>
      <pubDate>Tue, 05 Jun 2018 00:59:10 +0530</pubDate>
      <author>meine@akshendra.com (Akshendra Pratap Singh)</author>
      <guid>https://www.akshendra.com/post/express-reload/</guid>
      <description>I have been using nodemon for reloading express server and any other NodeJs code since I started writing backend NodeJS code. It does what it says on the label and does it pretty well. However, the problem with nodemon is lack of control and the fact that it seems to kill the process. You write a console.log statement and it will restart your whole server, which is all fine and dandy if your server starts quickly.</description>
    </item>
    
  </channel>
</rss>